<#if HAS_ANDROID>
import org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi
import org.jetbrains.kotlin.gradle.dsl.JvmTarget
</#if>
<#if HAS_WEB>
import org.jetbrains.kotlin.gradle.targets.js.dsl.ExperimentalWasmDsl
import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpackConfig
</#if>

plugins {
    alias(libs.plugins.kotlinMultiplatform)
    alias(libs.plugins.androidLibrary)
    alias(libs.plugins.jetbrainsCompose)
    alias(libs.plugins.compose.compiler)
    alias(libs.plugins.kotlinter)
    alias(libs.plugins.convention.module.feature)

}

kotlin {
    <#if HAS_WEB>
@OptIn(ExperimentalWasmDsl::class)
    wasmJs {
        browser {
            commonWebpackConfig {
                devServer = (devServer ?: KotlinWebpackConfig.DevServer()).apply {
                    static = (static ?: mutableListOf()).apply {
                        // Serve sources to debug inside browser
                        add(project.projectDir.path)
                    }
                }
            }
        }
    }
    </#if>

    <#if HAS_ANDROID>
    androidTarget {
        @OptIn(ExperimentalKotlinGradlePluginApi::class)
        compilerOptions {
            jvmTarget.set(JvmTarget.JVM_11)
        }
    }
    </#if>

    <#if HAS_IOS>
    listOf(
            iosX64(),
            iosArm64(),
            iosSimulatorArm64()
        ).forEach {
            it.binaries.framework {
                baseName = "${SHARED_NAME}"
                isStatic = true
            }
        }
    </#if>

    <#if HAS_DESKTOP>
    jvm()
    </#if>

    sourceSets {
        commonMain.dependencies {
           implementation(compose.runtime)
           implementation(compose.foundation)
           implementation(compose.material)
           implementation(compose.ui)
           implementation(compose.components.resources)
           implementation(compose.components.uiToolingPreview)
           implementation(libs.koin.core)
           implementation(libs.koin.test)
           implementation(libs.koin.compose)
        }
    }
}

android {
    buildFeatures {
        compose = true
    }
}
